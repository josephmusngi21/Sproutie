SPROUTIE APP - DEVELOPMENT TASKS
================================

IMMEDIATE PRIORITIES:
- Fix Firebase Auth persistence (AsyncStorage) - CRITICAL
- Update login/register components to use new switch system
+ Test MongoDB user API integration

PLANT DATA & API:
[X] grab plant infos from api and move to mongodb (COMPLETED - Trefle API integrated)
[X] Make page to display all plants (COMPLETED - PlantsScreen shows all plants from API)
[X] Add Search for certain plants (COMPLETED - SearchPlants screen with save functionality)
- Create plant detail view pages
- Add plant categories/filtering

USER MANAGEMENT:
- Complete user profile management
- Add user preferences/settings
[X] Handle user authentication states properly (COMPLETED - Firebase Auth with login/register)

USER LOCATION & ENVIRONMENT:
! Grab user location (GPS/manual entry)
! Grab daily temperature info (weather API integration)
! Store location data in user profile
! Add location permission handling

PERSONAL PLANT MANAGEMENT:
[X] Allow users to add personal plants (COMPLETED - Users can search and save plants)
[X] Grab info on plants and how often they should be watered (COMPLETED - Plant data from Trefle API)
[X] Save plant info on defaultDay database (COMPLETED - UserPlant model in MongoDB)
[X] Create "My Plants" section in app (COMPLETED - SearchPlants screen shows saved plants)
! Add plant care reminders/notifications
! Allow users to upload plant photos

SMART WATERING SYSTEM:
! Grab info on defaultDay and using location temperature info, adjust planting info
! Display planting info with climate adjustments
! Create watering schedule calculator
! Add seasonal adjustments

ONGOING/BACKGROUND TASKS:
% Keep checking periodically for change in weather info to adjust planting info
% Background sync for plant data updates
% Push notifications for plant care reminders
% Data backup and sync across devices

TECHNICAL IMPROVEMENTS:
[X] Add proper error handling throughout app (COMPLETED - Try/catch blocks in all API calls)
- Implement offline mode/data caching
[X] Add loading states for all API calls (COMPLETED - Loading indicators in all screens)
- Optimize performance for large plant databases
- Add data validation on all forms
- Implement proper TypeScript types throughout
[X] Environment variable management (COMPLETED - .env file with API_URL)

UI/UX ENHANCEMENTS:
[X] Design consistent styling system (COMPLETED - Separate styles.ts files for all screens)
- Add plant care calendar view
- Create onboarding flow for new users
- Add dark mode support
- Improve accessibility features
- Add plant care tips and guides
[X] Bottom tab navigation (COMPLETED - Home screen with Plants/Search/More tabs)

FUTURE FEATURES (Eventually):
!= Add plant disease identification (AI/ML)
!= Social features (share plant progress)
!= Plant care community/forums
!= Integration with smart home devices
!= Plant marketplace/trading
!= Advanced analytics on plant health
!= Weather alerts for plant protection

TESTING & DEPLOYMENT:
- Add unit tests for core functions
- Add integration tests for API calls
- Test on different devices/screen sizes
- Performance testing with large datasets
- Beta testing with real users
- App store deployment preparation

-=-=-=-=-=-=-=-=-=-=-=
INSPO
https://dribbble.com/shots/14398925-Task-Management-App-Inner-Screens


-=-=-=-=-=-=-=-=-=

Current To Do:

Specific Implementation Order:
Add location functionality to Profile screen
Create weather service (similar pattern to your location service)
Update server User model to store location/weather preferences
Test the integration

Steps:

1. Grab user location (GPS/manual entry)
You already have the locationService.ts created
Integrate it into your existing screens (maybe add a location button to the profile screen)
Add location permission handling to your app
2. Grab daily temperature info (weather API integration)
Create a weather service similar to your location service
Use a weather API (OpenWeatherMap, WeatherAPI, etc.)
Combine with location data you'll get from step 1
3. Store location data in user profile
Update your User model in the server to include location fields
Modify the user API endpoints to save/retrieve location data